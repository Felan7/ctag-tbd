#include "ctagSoundProcessortemplate.hpp"

using namespace CTAG::SP;

void ctagSoundProcessortemplate::Process(const ProcessData &data) {
}

ctagSoundProcessortemplate::ctagSoundProcessortemplate() {
    // construct internal data model
    knowYourself();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    LoadPreset(0);
}

ctagSoundProcessortemplate::~ctagSoundProcessortemplate() {
}

void ctagSoundProcessortemplate::knowYourself(){
    // autogenerated code here
    // sectionCpp0
	pMapPar.emplace("beatA_reset_on_stop", [&](const int val){ beatA_reset_on_stop = val;});
	pMapTrig.emplace("beatA_reset_on_stop", [&](const int val){ trig_beatA_reset_on_stop = val;});
	pMapPar.emplace("beatA_stop", [&](const int val){ beatA_stop = val;});
	pMapTrig.emplace("beatA_stop", [&](const int val){ trig_beatA_stop = val;});
	pMapPar.emplace("beatA_backwards", [&](const int val){ beatA_backwards = val;});
	pMapTrig.emplace("beatA_backwards", [&](const int val){ trig_beatA_backwards = val;});
	pMapPar.emplace("beatA_select", [&](const int val){ beatA_select = val;});
	pMapCv.emplace("beatA_select", [&](const int val){ cv_beatA_select = val;});
	pMapPar.emplace("beatA_pitch", [&](const int val){ beatA_pitch = val;});
	pMapCv.emplace("beatA_pitch", [&](const int val){ cv_beatA_pitch = val;});
	pMapPar.emplace("beatB_reset_on_stop", [&](const int val){ beatB_reset_on_stop = val;});
	pMapTrig.emplace("beatB_reset_on_stop", [&](const int val){ trig_beatB_reset_on_stop = val;});
	pMapPar.emplace("beatB_stop", [&](const int val){ beatB_stop = val;});
	pMapTrig.emplace("beatB_stop", [&](const int val){ trig_beatB_stop = val;});
	pMapPar.emplace("beatB_backwards", [&](const int val){ beatB_backwards = val;});
	pMapTrig.emplace("beatB_backwards", [&](const int val){ trig_beatB_backwards = val;});
	pMapPar.emplace("beatB_select", [&](const int val){ beatB_select = val;});
	pMapCv.emplace("beatB_select", [&](const int val){ cv_beatB_select = val;});
	pMapPar.emplace("beatB_pitch", [&](const int val){ beatB_pitch = val;});
	pMapCv.emplace("beatB_pitch", [&](const int val){ cv_beatB_pitch = val;});
	pMapPar.emplace("allow_logic_mixes", [&](const int val){ allow_logic_mixes = val;});
	pMapTrig.emplace("allow_logic_mixes", [&](const int val){ trig_allow_logic_mixes = val;});
	pMapPar.emplace("xFadeA_B", [&](const int val){ xFadeA_B = val;});
	pMapCv.emplace("xFadeA_B", [&](const int val){ cv_xFadeA_B = val;});
	isStereo = false;
	id = "bbeats";
	// sectionCpp0
}